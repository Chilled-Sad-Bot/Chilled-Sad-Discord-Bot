diff --git a/node_modules/canvacord/src/Rank.js b/node_modules/canvacord/src/Rank.js
index ee33e05..7eb076a 100644
--- a/node_modules/canvacord/src/Rank.js
+++ b/node_modules/canvacord/src/Rank.js
@@ -53,9 +53,6 @@ const assets = require("./Assets");
  * @property {object} requiredXP Rank card required xp
  * @property {number} [requiredXP.data=0] required xp
  * @property {string} [requiredXP.color="#FFFFFF"] Rank card required xp color
- * @property {object} discriminator Rank card discriminator
- * @property {number|string} [discriminator.discrim=null] The discriminator
- * @property {string} [discriminator.color="rgba(255, 255, 255, 0.4)"] Rank card discriminator color
  * @property {object} username Username Data
  * @property {string} [username.name=null] Rank card username
  * @property {string} [username.color="#FFFFFF"] Rank card username color
@@ -82,7 +79,6 @@ class Rank {
             })
      */
     constructor() {
-
         /**
          * Rank card data
          * @type {CanvacordRankData}
@@ -148,15 +144,15 @@ class Rank {
                 data: 0,
                 color: "#FFFFFF"
             },
-            discriminator: {
-                discrim: null,
-                color: "rgba(255, 255, 255, 0.4)"
-            },
             username: {
                 name: null,
                 color: "#FFFFFF"
             },
-            renderEmojis: false
+            renderEmojis: false,
+            minXP: {
+                data: 0,
+                color: "#FFFFFF"
+            }
         };
 
         // Load default fonts
@@ -209,18 +205,6 @@ class Rank {
         return this;
     }
 
-    /**
-     * Set discriminator
-     * @param {string|number} discriminator User discriminator
-     * @param {string} color Discriminator color
-     * @returns {Rank}
-     */
-    setDiscriminator(discriminator, color = "rgba(255, 255, 255, 0.4)") {
-        this.data.discriminator.discrim = !isNaN(discriminator) && `${discriminator}`.length === 4 ? discriminator : null;
-        this.data.discriminator.color = color && typeof color === "string" ? color : "rgba(255, 255, 255, 0.4)";
-        return this;
-    }
-
     /**
      * Set progressbar style
      * @param {string|string[]} color Progressbar Color
@@ -291,6 +275,19 @@ class Rank {
         return this;
     }
 
+    /**
+     * Set minimum xp of the current level
+     * @param {number} data Required xp
+     * @param {string} color  Color
+     * @returns {Rank}
+    */
+    setMinXP(data, color = "#FFFFFF") {
+        if (typeof data !== "number") throw new Error(`Min xp data type must be a number, received ${typeof data}!`);
+        this.data.minXP.data = data;
+        this.data.minXP.color = color && typeof color === "string" ? color : "#FFFFFF";
+        return this;
+    }
+
     /**
      * Set current xp
      * @param {number} data Current xp
@@ -495,21 +492,11 @@ class Rank {
         ctx.font = `bold 36px ${ops.fontX}`;
         ctx.fillStyle = this.data.username.color;
         ctx.textAlign = "start";
-        const name = Util.shorten(this.data.username.name, 10);
+        const name = Util.shorten(this.data.username.name, 15);
 
         // apply username
         !this.data.renderEmojis ? ctx.fillText(`${name}`, 257 + 18.5, 164) : await Util.renderEmoji(ctx, name, 257 + 18.5, 164);
 
-        // draw discriminator
-        if (!this.data.discriminator.discrim) throw new Error("Missing discriminator!");
-        const discrim = `${this.data.discriminator.discrim}`;
-        if (discrim) {
-            ctx.font = `36px ${ops.fontY}`;
-            ctx.fillStyle = this.data.discriminator.color;
-            ctx.textAlign = "center";
-            ctx.fillText(`#${discrim.substr(0, 4)}`, ctx.measureText(name).width + 20 + 335, 164);
-        }
-
         // fill level
         if (this.data.level.display && !isNaN(this.data.level.data)) {
             ctx.font = `bold 36px ${ops.fontX}`;
@@ -628,6 +615,15 @@ class Rank {
         if (rx <= 0) return 1;
         if (cx > rx) return parseInt(this.data.progressBar.width) || 0;
 
+        if(this.data.minXP.data > 0) {
+            const mx = this.data.minXP.data;
+            if (cx < mx) return 0;
+
+            const nx = cx - mx;
+            const nr = rx - mx;
+            return (nx * 615) / nr;
+        }
+
         let width = (cx * 615) / rx;
         if (width > this.data.progressBar.width) width = this.data.progressBar.width;
         return parseInt(width) || 0;
